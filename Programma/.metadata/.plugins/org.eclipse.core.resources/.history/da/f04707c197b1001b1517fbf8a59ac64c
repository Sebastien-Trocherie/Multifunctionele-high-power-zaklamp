/*
 * Morse.c
 *
 *  Created on: 10 mei 2021
 *      Author: troch
 */
/* Includes ------------------------------------------------------------------*/
#include <stdio.h>
#include "main.h"
#include "Morse.h"

void vMorseConvert( uint8_t data )
{
	static uint8_t rx_lenght = 0;
	static uint8_t rx_data[128];

	if(Cdata != 10)
	{
		rx_data[rx_lenght] = Cdata;
		rx_lenght++;
	}
	else
	{
		for(uint8_t i = 0; i < rx_lenght; i++)
		{
			switch (rx_data[i])
			{
				    case 97:			//a
				        send(0b10, 2);
				        break;
				    case 98:			//b
				    	send(0b0111, 4);
				    	break;
				    case 99:			//c
				        send(0b0101, 4);
				        break;
				    case 100:			//d
				        send(0b011, 3);
				        break;
				    case 101:			//e
				        send(0b1 , 1);
				        break;
				    case 102:			//f
				        send(0b1101, 4);
				        break;
				    case 103:			//g
				        send(0b001, 3);
				        break;
				    case 104:			//h
				        send(0b1111, 4);
				        break;
				    case 105:			//i
				        send(0b11, 2);
				        break;
				    case 106:			//j
				        send(0b1000, 4);
				        break;
				    case 107:			//k
				        send(0b010, 3);
				        break;
				    case 108:			//l
				        send(0b1011, 4);
				        break;
				    case 109:			//m
				        send(0b00, 2);
				        break;
				    case 110:			//n
				        send(0b01, 2);
				        break;
				    case 111:			//o
				        send(0b000, 3);
				        break;
				    case 112:			//p
				        send(0b1001, 4);
				        break;
				    case 113:			//q
				        send(0b0010, 4);
				        break;
				    case 114:			//r
				        send(0b101, 3);
				        break;
				    case 115:			//s
				        send(0b111, 3);
				        break;
				    case 116:			//t
				        send(0b0, 1);
				        break;
				    case 117:			//u
				        send(0b110, 3);
				        break;
				    case 118:			//v
				        send(0b1110, 4);
				        break;
				    case 119:			//w
				        send(0b100, 3);
				        break;
				    case 120:			//x
				        send(0b0110, 4);
				        break;
				    case 121:			//y
				        send(0b0100, 4);
				        break;
				    case 122:			//z
				        send(0b0011, 4);
				        break;
				    case 31:			//1
				        send(0b10000, 5);
				        break;
				    case 32:			//2
				        send(0b11000, 5);
				        break;
				    case 33:			//3
				        send(0b11100, 5);
				        break;
				    case 34:			//4
				        send(0b11110, 5);
				        break;
				    case 35:			//5
				        send(0b11111, 5);
				        break;
				    case 36:			//6
				        send(0b01111, 5);
				        break;
				    case 37:			//7
				        send(0b00111, 5);
				        break;
				    case 38:			//8
				        send(0b00011, 5);
				        break;
				    case 39:			//9
				        send(0b00001, 5);
				        break;
				    case 30:			//0
				        send(0b00000, 5);
				        break;
				    default: send(0,0);
				    break;
			}
		}
		rx_lenght = 0;
	}
}

void send(uint8_t code, uint8_t lenght)
{
	for(uint8_t x = 0; x < lenght; x++)
	{
		if( (code >> x ) & 0x01 )
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
			HAL_Delay(500);
		}
		else
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
			HAL_Delay(500);
		}
	}
}
